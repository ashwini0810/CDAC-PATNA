-----------------------
Subqueries
-----------------------

select * 
from ( select member_id from lms_members) inline_view;

/* -- simple subquery */
select * from lms_book_issue iss where iss.member_id in (select member_id from lms_members);  
/* -- corelated subquery */
select * from lms_book_issue iss where exists (select member_id from lms_members lm where lm.member_id = iss.member_id); 

-----------------------------
-- Subqueries illustration 
-----------------------------
from ( select ---------------------------------------------------------- ) -- inline view 

-- where tab1.col1 = (select ----------------------------------------------------------)

------------------------------
Corelated Subquery DEMO 
------------------------------

create table table1 ( col1 number);
create table table2 ( col2 number);

insert into table1(col1) values(1);
insert into table1(col1) values(2);
insert into table1(col1) values(3);
insert into table1(col1) values(4);
insert into table1(col1) values(5);

insert into table2(col2) values(1);
insert into table2(col2) values(2);

select * from table1 ;
select * from table2 ;

select * from table1 where exists(select * from table2 where table2.col2 = table1.col1 );
select table1.* from table1 where not exists(select * from table2 where table2.col2 = table1.col1 );

----------------------------------------
on our sample data set 
----------------------------------------
-- subquery example 
--details of the books issuances such the category is JAVA/FUNDAMENTALS 
--and PUBLISH_DATE is greater than to_date('01-01-2005','dd-mm-yyyy')

select * from lms_book_issue 
where book_code
in
(     select  BOOK_code 
        from lms_book_details
        where (CATEGORY = 'JAVA' or CATEGORY = 'FUNDAMENTALS') 
        and PUBLISH_DATE > to_date('01-01-2005','dd-mm-yyyy')
);


---------------------------------------
--> corelated subqueries 
----------------------------------------
/* member_name and their city such that they have a supplier from their city */
-- corelated subqueries ( using exists) 
select member_name , city  from lms_members mem where 
exists (select * from lms_suppliers_details sdet where upper(sdet.address) = upper(mem.city) );


/* i need book_code and book_title of all books that have been issued */
-- using join 
select distinct bdet.book_code,book_title
from lms_book_details bdet inner join lms_book_issue iss on ( bdet.book_code = iss.book_code) ;

-- subquery 
select distinct book_code,book_title
from lms_book_details bdet 
where book_code in (select distinct book_code from lms_book_issue iss );

-- corelated subquery using exists
select distinct book_code,book_title from lms_book_details bdet
where exists  (select * from lms_book_issue iss where iss.book_code = bdet.book_code);

-----
general syntax around subqueries 
------
select * from outer_table where outer_table.column in (select  inner_table.column from inner_table   );
select * from outer_table where exists (select * from inner_table where inner_table.column = outer_table.column);

---------------
Exercises:
---------------
/*details of the books whose supplier belong to delhi /mumbai / chennai */
select bd.*
from lms_book_details bd inner join lms_suppliers_details sd on (sd.supplier_id = bd.supplier_id)
where lower(address) in ( 'delhi','mumbai','chennai');

select bd.*
from lms_book_details bd
where supplier_id in (select supplier_id from lms_suppliers_details sd  where lower(address) in ( 'delhi','mumbai','chennai'));

select bd.*
from lms_book_details bd
where exists (select * from lms_suppliers_details sd  where lower(address) in ( 'delhi','mumbai','chennai')
    		  and sd.supplier_id = bd.supplier_id	)


/*name of the member whose  has issued a book , that same book supplier belong to the same city as that of the member*/

--select distinct member_name , city , iss.book_code , sd.supplier_id , address
select distinct member_name     
from lms_members lm inner join lms_book_issue iss on ( lm.member_id = iss.member_id )
inner join lms_book_details bd on ( bd.book_code = iss.book_code )
inner join lms_suppliers_details sd on ( sd.supplier_id = bd.supplier_id)
where lm.city = sd.address;

select distinct member_name     
from lms_members lm
where exists (
                select iss.* from lms_book_issue iss  inner join lms_book_details bd on ( bd.book_code = iss.book_code )
                inner join lms_suppliers_details sd on ( sd.supplier_id = bd.supplier_id)
                where lm.city = sd.address
                and lm.member_id = iss.member_id 
             );
    
)

/*book_code and name of the book that have been issued */
select distinct bd.book_code , book_title,iss.*
from lms_book_details bd inner join lms_book_issue iss on ( iss.book_code = bd.book_code);

select distinct bd.book_code , book_title
from lms_book_details bd
where exists (select * from lms_book_issue iss where iss.book_code = bd.book_code)

/* book issue details  of the member who belongs to Pune/mumbai/chennai  */

select iss.*
from lms_book_issue iss inner join lms_members lm on ( iss.member_id = lm.member_id)
where lower(city) in ('pune','mumbai','chennai');

select iss.*
from lms_book_issue iss 
where exists ( select * from lms_members lm  where iss.member_id = lm.member_id and lower(city) in ('pune','mumbai','chennai') );

/* members who have never issued a book */
select lm.*
from  lms_members lm   left join lms_book_issue iss on ( iss.member_id = lm.member_id)
where iss.BOOK_ISSUE_NO	 is null ;

select lm.*
from  lms_members lm   
where not exists ( select * from  lms_book_issue iss where iss.member_id = lm.member_id )


-------------------------------------------------------------------
views -- schema objects/ named query / definition is saved in the database / on invocation query is executed each time  
-------------------------------------------------------------------


/* members who have never issued a book */

create view books_not_issued_members as
select lm.*
from  lms_members lm   
where not exists ( select * from  lms_book_issue iss where iss.member_id = lm.member_id );

/* client executes  this view */
select * from books_not_issued_members;

select * from user_views where lower(view_name) = 'books_not_issued_members';

-- tried updating the view 
update books_not_issued_members set member_name = 'UNKNOWN';
select * from lms_members;

-- member_name , book_code , book_name that he/she has issued 
create view member_book_issued as
select distinct member_name , bd.book_code , book_title
from lms_members lm inner join lms_book_issue iss on ( iss.member_id = lm.member_id)
inner join lms_book_details bd on ( bd.book_code = iss.book_code);

select * from member_book_issued;

update member_book_issued set MEMBER_NAME = 'Unknown-issued';
-- for views like these where you have joins you would need to write instead of triggers 

------------------
--- exercise :
------------------
-- create a view named "lms_issued_members" which has member_id , name of the member , book_code , date_returned 