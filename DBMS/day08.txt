-- Yesterday's trigger solutions :
-------------------------------------------
-- Yesterday's trigger solutions :
-------------------------------------------

drop table employees;
drop table departments;
CREATE TABLE departments (
  department_id NUMBER PRIMARY KEY,
  department_name VARCHAR2(50),
  location VARCHAR2(50),
  avg_salary NUMBER(10, 2)
);


INSERT INTO departments (department_id, department_name, location, avg_salary)
VALUES (1, 'HR', 'New York', null);

INSERT INTO departments (department_id, department_name, location, avg_salary)
VALUES (2, 'IT', 'San Francisco', null);

INSERT INTO departments (department_id, department_name, location, avg_salary)
VALUES (3, 'Finance', 'London', null);

INSERT INTO departments (department_id, department_name, location, avg_salary)
VALUES (4, 'Sales', 'Paris', null);



CREATE TABLE employees (
  employee_id NUMBER,
  first_name VARCHAR2(50),
  last_name VARCHAR2(50),
  department_id NUMBER,
  job_title VARCHAR2(50),
  salary NUMBER(10, 2),
  hire_date DATE,
  PRIMARY KEY (employee_id),
  FOREIGN KEY (department_id) REFERENCES departments(department_id)
);




INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (1, 'John', 'Doe', 1, 'Manager', 75000.00, TO_DATE('2022-03-15', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (2, 'Jane', 'Smith', 2, 'Engineer', 60000.00, TO_DATE('2022-05-10', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (3, 'Michael', 'Johnson', 1, 'Analyst', 55000.00, TO_DATE('2022-02-10', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (4, 'Emily', 'Anderson', 3, 'Assistant Manager', 65000.00, TO_DATE('2023-01-05', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (5, 'David', 'Williams', 2, 'Developer', 70000.00, TO_DATE('2022-08-20', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (6, 'Jessica', 'Thompson', 1, 'Manager', 70000.00, TO_DATE('2022-01-10', 'YYYY-MM-DD'));

    
/*
1. Create a trigger that automatically updates the average salary in the "departments" table whenever a new employee is inserted into the "employees" table.
2. Create a trigger that calculates and updates the average salary in the "departments" table whenever an employee's salary is updated.
*/

create or replace trigger my_insert_delete_update_trigger 
after insert or delete or update
on employees 
for each row 
declare    
    var_total_salary number;
    var_employee_count number :=0;
	PRAGMA AUTONOMOUS_TRANSACTION;
begin

    if INSERTING then
    	select sum(salary),count(salary) into var_total_salary,var_employee_count from employees where department_id = :new.department_id ;
        dbms_output.put_line( 'var_department_id:' ||:new.department_id  || ' var_total_salary: ' || var_total_salary || ' var_employee_count:' || var_employee_count || ' :new.salary: ' || :new.salary);

		update departments d 
            set avg_salary = round((var_total_salary + :new.salary)/(var_employee_count+1))
            where department_id = :new.department_id ; 

	    dbms_output.put_line( 'No of rows effected were ' || sql%rowcount );
    elsif DELETING then 
    	select sum(salary),count(salary) into var_total_salary,var_employee_count from employees where department_id = :old.department_id ;
        dbms_output.put_line( 'var_department_id:' ||:new.department_id  || ' var_total_salary: ' || var_total_salary || ' var_employee_count:' || var_employee_count || ' :old.salary: '  || :old.salary);

		update departments d 
            set avg_salary = round((var_total_salary - :old.salary)/(var_employee_count-1))
            where department_id = :old.department_id ; 
		
		dbms_output.put_line( 'No of rows effected were ' || sql%rowcount );
    elsif UPDATING then
    	select sum(salary),count(salary) into var_total_salary,var_employee_count from employees where department_id = :new.department_id ;
        dbms_output.put_line( 'var_department_id:' ||:new.department_id  || ' var_total_salary: ' || var_total_salary || ' var_employee_count:' || var_employee_count || ' :new.salary: ' || :new.salary);

		update departments d 
            set avg_salary = round((var_total_salary  - :old.salary + :new.salary)/var_employee_count)
            where department_id = :new.department_id ; 

	    dbms_output.put_line( 'No of rows effected were ' || sql%rowcount );

	end if;
    commit;
end;


-- testcase 1 : insert
--before insert : null 
select * from  departments where department_id = 1;

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (7, 'John', 'Doe', 1, 'Manager', 75000.00, TO_DATE('2022-03-15', 'YYYY-MM-DD'));

select round(avg(salary)) from employees where department_id = 1;

-- after_insert : 68750
select * from  departments where department_id = 1;


-- testcase 2 : delete
--before delete : 68750 
select * from  departments where department_id = 1;

delete from employees where employee_id = 7;

select round(avg(salary)) from employees where department_id = 1;

-- after_delete : 66667  
select * from  departments where department_id = 1;

-- testcase 3 : update
--before update : 66667  
select * from  departments where department_id = 1;

-- before update : 75000 
select salary from  employees where employee_id = 1;

update employees set salary = salary * 1.1 where employee_id = 1;

-- after update :  69167
select round(avg(salary)) from employees where department_id = 1;

-- after update : 82500
select salary from  employees where employee_id = 1;

-- after update : 69167
select * from  departments where department_id = 1;

---------------------------
-- instead of triggers
---------------------------

-- member_name , book_code , book_name that he/she has issued 
create view member_book_issued as
select distinct member_name , bd.book_code , book_title
from lms_members lm inner join lms_book_issue iss on ( iss.member_id = lm.member_id)
inner join lms_book_details bd on ( bd.book_code = iss.book_code);

select * from member_book_issued;
select * from lms_members;
update member_book_issued set MEMBER_NAME = 'Unknown-issued';
-- for views like these where you have joins you would need to write instead of triggers 

create or replace trigger my_instead_of_trigger 
INSTEAD OF update 
ON member_book_issued
for each row 
declare
begin
    update lms_members set MEMBER_NAME = :new.member_name
    where member_id in (
            select distinct lm.member_id
            from lms_members lm inner join lms_book_issue iss on ( iss.member_id = lm.member_id)
            inner join lms_book_details bd on ( bd.book_code = iss.book_code)
    );
end;

-------------------------
Looping Constructs IN PL/SQL
-------------------------
1) Simple Loop
2) For Loop
3) While Loop

1) Simple :
loop
    
end loop;

2) While 
while condition
loop
end loop

3) for loop
 for i in lower_bound .. upper_bound 
 loop
 end loop;

-----------------
-- print "hello" 10 times using simple loop
declare 
	cntr number :=1;
begin
	loop
		dbms_output.put_line('hello');
		if cntr = 10 then 
		    exit; /* equivalent to a break in other languages , breaks the loop and not exits the program*/
		end if;
		cntr:= cntr+1;
	end loop;	
    dbms_output.put_line('I am the end of the program');
end;

-- print "hello" 10 times using simple loop but with exit when syntax
declare 
	cntr number :=1;
begin
	loop
		dbms_output.put_line('hello');
		    exit when cntr = 10; /* equivalent to a break in other languages , breaks the loop and not exits the program*/
		cntr:= cntr+1;
	end loop;	
	dbms_output.put_line('I am the end of the program');	
end;

-- print "hello" 10 times using simple for loop
begin
	FOR cntr in 1..10
	loop
		dbms_output.put_line('hello');
	end loop;	
end;

-- print "hello" 10 times using while loop
declare 
	cntr number:=1;
begin
	while cntr <=10
	loop
		dbms_output.put_line('hello');
		cntr:= cntr+1;
	end loop;	
end;

------------------------------
-- conditional constructs 
------------------------------

/*
if condition then 
	if_block_code
end if

if condition then
	if_block_code
else then
	else_block_code
end if

if condition1 then 
	if_condition1_block_code
elsif condition2 then
	if_condition2_block_code
elsif condition3 then
	if_condition3_block_code
else then
	else_block_code
end if


-- simple case 
case expression
    when val1 then block1
    when val2 then block2
    else
    default_block
end case;

-- searched case 
case 
    when expression1 then block1
    when expression2 then block2
    else
        default_block
end case;
*/

-- if elsif else blocks
declare
 temperature number := 80;
begin

 if temperature > 50 then 
  	dbms_output.put_line('It is cold, Lets have Coffee !!!');
 end if;
 
 if temperature > 65 then 
  	dbms_output.put_line('It is warm, Lets play football !!!');
 end if;

 if temperature > 90 then 
  dbms_output.put_line('It is hot, Lets sit indoors and watch a movie !!!');
 end if;

 if temperature > 120 then 
  	dbms_output.put_line('It is super hot, Lets head towards swimming pool !!!');
 else
  	dbms_output.put_line('Time to leave Earth !!!');
 end if;
 
end; 

-- cases
-- searched case
declare 
    temperature number :=90;
begin
    case 
        when temperature > 50 then dbms_output.put_line('It is cold, Lets have Coffee !!!');
        when temperature > 65 then   dbms_output.put_line('It is warm, Lets play football !!!');
        when temperature > 90  then dbms_output.put_line('It is hot, Lets sit indoors and watch a movie !!!');
        when temperature > 120 then dbms_output.put_line('It is super hot, Lets head towards swimming pool !!!');
        else
            dbms_output.put_line('Time to leave Earth !!!');
    end case;

end;

-- if else equivalent
declare 
    temperature number :=90;
begin
        if temperature > 50 then dbms_output.put_line('It is cold, Lets have Coffee !!!');
        elsif temperature > 65 then   dbms_output.put_line('It is warm, Lets play football !!!');
        elsif temperature > 90  then dbms_output.put_line('It is hot, Lets sit indoors and watch a movie !!!');
        elsif temperature > 120 then dbms_output.put_line('It is super hot, Lets head towards swimming pool !!!');
        else
            dbms_output.put_line('Time to leave Earth !!!');
        end if;
end;

-- simple case
declare 
 book_name varchar2(100) := 'Software Engineering';
begin
    case book_name
        when 'Head First Java' then  dbms_output.put_line('Category : Java');
        when  'Let us C' then dbms_output.put_line('Category : C');
        else
         dbms_output.put_line('Category : Default');
    end case;
end;


-- Equivalent code if elsif
declare 
 book_name varchar2(100) := 'Software Engineering';
begin
    if  book_name = 'Head First Java' then dbms_output.put_line('Category : Java');
    elsif book_name =  'Let us C' then dbms_output.put_line('Category : C');
    else
         dbms_output.put_line('Category : Default');
    end if;
end;

----------------------------------
DEMO : Fetching from explicit cursors
----------------------------------
Explicitly declare a cursor and then perform the open, fetch, and close operations yourself.


Example:
A PLSQL block that fetches employees in ascending salary order and gives them a bonus from a total pool of funds by calling the assign_bonus
procedure, whose header is
    
PROCEDURE assign_bonus 
( employee_id_in IN employees.employee_id%TYPE,
  bonus_pool_io  IN OUT INTEGER
)
Each time assign_bonus is called, the procedure subtracts the bonus(some random value) given from the total(bonus_pool_io) 
and returns that reduced total.When that bonus pool is exhausted, it stops fetching and commits all changes.


-- Solution--
drop table  employees;
create table employees(employee_id number , salary number , bonus number );
insert into employees(employee_id,salary) values ( 1,100);
insert into employees(employee_id,salary) values ( 2,200);
insert into employees(employee_id,salary) values ( 3,300);
insert into employees(employee_id,salary) values ( 4,400);
insert into employees(employee_id,salary) values ( 5,500);

select * from employees;

create or replace PROCEDURE assign_bonus( employee_id_in IN varchar2,
  bonus_pool_io  IN OUT number
) as
begin
   update employees set bonus = 10 where employee_id =employee_id_in;
   bonus_pool_io := bonus_pool_io - 10 ;
end;
select * from employees;

-- cursor implicit for loop
declare 
total_bonus number := 60;
begin
 for rcvd_row in (select employee_id from employees order by salary asc)
 loop
  assign_bonus(rcvd_row.employee_id,total_bonus);
  exit when total_bonus <=9;
 end loop;
end;

update employees set bonus = 0 ;
-- cursor explicit for loop
declare 
total_bonus number := 30;
cursor my_cursor is select employee_id from employees order by salary asc;
begin
 for rcvd_row in my_cursor 
 loop
  assign_bonus(rcvd_row.employee_id,total_bonus);
  exit when total_bonus <=9;
 end loop;
end;

update employees set bonus = 0 ;
-- cursor explicit simple loop
declare 
total_bonus number := 30;
cursor my_cursor is select employee_id from employees order by salary asc; /* step1-- declare the cursor  */
rcvd_row  varchar2(100);
begin
 open my_cursor; /* step2-- open the cursor  */
 loop
  fetch  my_cursor into rcvd_row; /* step3-- fetch from the cursor  */
  exit when total_bonus <=9 ;
  exit when my_cursor%NOTFOUND; /* step4-- stop the loop when the cursor is exhausted  */
  assign_bonus(rcvd_row,total_bonus);
 end loop;
 close my_cursor; /* step5-- close the cursor  */
end;

select * from employees;

----------------------
Exercises on cursors 
----------------------
A) USING EXPLICIT CURSORS AND OPEN CLOSE SYNTAX --> Iterate through the lms_members table and increase the date_expiry 
of all members by an year 


select * from lms_members where member_id = 'LM001';
update lms_members set date_expire = date_expire + 365  where member_id = 'LM001';

/* using cursor for loop*/
declare
    cursor my_cursor is select * from lms_members;
begin
    for rcv_row in my_cursor 
    loop
    	update lms_members set date_expire = date_expire + 365  where member_id = rcv_row.member_id;
    end loop;
end;

select * from lms_members;
/* using explicit cursor open fetch and close */
declare
    cursor my_cursor is select member_id  from lms_members;
    rcv_row my_cursor%rowtype;
begin
    open my_cursor ;
    loop
        fetch my_cursor into rcv_row;
        exit when my_cursor%NOTFOUND; 
    	update lms_members set date_expire = date_expire + 365  where member_id = rcv_row.member_id;
    end loop;
    close my_cursor;
end;


----------------------------------------------------------
Introduction to PL/SQL Exceptions -- Exception Handling 
----------------------------------------------------------

PL/SQL treats all errors that occur in an anonymous block, procedure, or function as exceptions. The exceptions can have different causes such as coding mistakes, bugs, even hardware failures.

It is not possible to anticipate all potential exceptions, however, you can write code to handle exceptions to enable the program to continue running as normal.

The code that you write to handle exceptions is called an exception handler.

A PL/SQL block can have an exception-handling section, which can have one or more exception handlers.

BEGIN
    -- executable section
    ...
    -- exception-handling section
    EXCEPTION 
        WHEN e1 THEN 
            -- exception_handler1
        WHEN e2 THEN 
            -- exception_handler2
        WHEN OTHERS THEN
            -- other_exception_handler
END;

------------------------------------------
--- Demo
------------------------------------------
drop table my_custom_users ;
create table my_custom_users ( username varchar2(100) , user_id number );

insert into my_custom_users ( username,user_id ) values ('User1',1);
insert into my_custom_users ( username,user_id ) values ('User2',2);
insert into my_custom_users ( username,user_id ) values ('User2',2);
insert into my_custom_users ( username,user_id ) values ('User3',3);
insert into my_custom_users ( username,user_id ) values ('User4',4);
insert into my_custom_users ( username,user_id ) values ('User5',5);
insert into my_custom_users ( username,user_id ) values ('SYSTEM',0);

select * from my_custom_users;

-- Normal execution
DECLARE
  l_user_id   my_custom_users.username%TYPE := 0;
  l_username  my_custom_users.username%TYPE;
BEGIN
  SELECT username
  INTO   l_username
  FROM   my_custom_users
  WHERE  user_id = l_user_id;
  
  DBMS_OUTPUT.put_line('l_username=' || l_username);
END;
/

-- No user 999999 and no exception handling
DECLARE
  l_user_id   my_custom_users.username%TYPE := 999999;
  l_username  my_custom_users.username%TYPE;
BEGIN
  SELECT username
  INTO   l_username
  FROM   my_custom_users
  WHERE  user_id = l_user_id;
  
  DBMS_OUTPUT.put_line('l_username=' || l_username);
END;
/

-- No user 999999 and exception handling
DECLARE
  l_user_id   my_custom_users.username%TYPE := 999999;
  l_username  my_custom_users.username%TYPE; 
BEGIN
  SELECT username
  INTO   l_username
  FROM   my_custom_users
  WHERE  user_id = l_user_id;

  DBMS_OUTPUT.put_line('l_username=' || l_username);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.put_line('No users have a user_id=' || l_user_id);
END;

-- user defined exception handling without a custom message in its definition since User present but a Priviledged user 
DECLARE
  l_user_id   my_custom_users.username%TYPE := 0;
  l_username  my_custom_users.username%TYPE;
  
  ex_forbidden_users  EXCEPTION;
BEGIN
  SELECT username
  INTO   l_username
  FROM   my_custom_users
  WHERE  user_id = l_user_id;
  
  -- Signal an error is the SYS or SYSTEM users are queried.
  IF l_username IN ('SYS', 'SYSTEM') THEN
    RAISE ex_forbidden_users;
  END IF;
  
  DBMS_OUTPUT.put_line('l_username=' || l_username);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.put_line('No users have a user_id=' || l_user_id);
  WHEN ex_forbidden_users THEN
    DBMS_OUTPUT.put_line('Don''t mess with the ' || l_username || ' user, it is forbidden!');
END;