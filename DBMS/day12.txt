------------------------------------
--- Update operation continued 
------------------------------------

// lets create a new field BASE_PRICE
db.LMS_BOOK_DETAILS.updateMany({}, {$set: {BASE_PRICE: NumberInt(5000) }});
db.LMS_BOOK_DETAILS.updateMany({CATEGORY : "Python"}, {$set: {BASE_PRICE: NumberInt(1000) }});
db.LMS_BOOK_DETAILS.updateMany({CATEGORY : "JAVA"}, {$set: {BASE_PRICE: NumberInt(500) }});

// trying out multiple update operators 
//https://www.mongodb.com/docs/manual/reference/operator/update-field/

//$inc 
// increment base prices for category python by 10 rs
// db.LMS_BOOK_DETAILS.updateMany({CATEGORY : "Python"}, {$set:{BASE_PRICE: {$add: ["$BASE_PRICE", 10]} }});
db.LMS_BOOK_DETAILS.updateMany({CATEGORY : "Python"}, {$inc: {BASE_PRICE: NumberInt(10) }});

// $mul 
// increment base prices for category python by 10 Percent
db.LMS_BOOK_DETAILS.updateMany({CATEGORY : "Python"}, {$mul: {BASE_PRICE: 1.1 }});
db.LMS_BOOK_DETAILS.find({CATEGORY : "Python"}).forEach(
function(doc){
     db.LMS_BOOK_DETAILS.updateMany({CATEGORY : "Python"}, {$set: {BASE_PRICE: NumberInt(doc.BASE_PRICE)}});
    }
);


// rename base_price to temp_field
// $rename
db.LMS_BOOK_DETAILS.updateMany({}, {$rename: {BASE_PRICE: "temp_field" }});


// drop the field temp_field
// $unset
db.LMS_BOOK_DETAILS.updateMany({}, {$unset: {temp_field: NumberInt(5000) }});

// lets have lowerlimit price cap of the book in my lms to 1000 
//$max
// update lms_book_details set price = 1000 where price < 1000;
db.LMS_BOOK_DETAILS.updateMany({}, {$max: {PRICE: NumberInt(1000) }});
db.LMS_BOOK_DETAILS.updateMany({ PRICE: { $lt: NumberInt(1000) } },{$set : {PRICE: NumberInt(1000) }}) 

// lets have upperlimit price cap of the book in my lms to 1100 
//$min
// update lms_book_details set price = 1100 where price > 1100;
db.LMS_BOOK_DETAILS.updateMany({}, {$min: {PRICE: NumberInt(1100) }});
db.LMS_BOOK_DETAILS.updateMany({ PRICE: { $gt: NumberInt(1100) } },{$set : {PRICE: NumberInt(1100) }}) ;


/*
----------------------------------
DEMO -- Simple selects using find()
----------------------------------
*/

// select *  from customer 
db.customer.find({},{});

// select *  from customer where address = 'Pune'
db.customer.find({address: "Pune"},{});
db.customer.find({address: { $eq: "Pune" }},{}); // $eq is implicit in above statement
//https://www.mongodb.com/docs/manual/reference/operator/query-comparison/#comparison-query-operators
// Comparison operators = ($eq) < ($lt) > ($gt) <= ($lte) >= ($gte) != ($ne) ($in) in ($nin) not in

// select * from customer where address like '%pune%'
db.getCollection("customer").find({ "address" : /pune/});
db.getCollection("customer").find({ "address" : { $regex: /pune/ } });

// select * from customer where lower(address) like '%pune%'
db.getCollection("customer").find({ "address" : /pune/i}); 
db.getCollection("customer").find({  "address" : { $regex: /pune/i } });

// select * from customer where street_no = 123
db.customer.find({"billing_address.street_no": 123},{});
db.customer.find({"billing_address.street_no": {$eq: 123}},{});

// select * from  customer.Cart.added_products[] where [].product_id = 'X001' // invalid syntax just for reference
db.customer.find({ "Cart.added_products": {$elemMatch: { "product_id" : "X001"} }  },{});

// select * from  customer.Cart.added_products[] where [].product_id = 'X003' // invalid syntax just for reference
db.customer.find({ "Cart.added_products": {$elemMatch: { "product_id" : "X003"} }  },{});

// select * from customer where total_cost > 350
db.customer.find({"Cart.total_cost": {$gt: 350}},{});

// select * from customer where total_cost > 350 and address = 'Pune'
// https://www.mongodb.com/docs/manual/reference/operator/query-logical/#logical-query-operators
// $and,$or,$nor,$not
db.customer.find({"Cart.total_cost": {$gt: 350} , address : "Pune"},{});
db.customer.find({  $and: [{"Cart.total_cost": {$gt: 350} }, {address : "Pune"}]  }   ,{});

db.customer.find({  $or: [{"Cart.total_cost": {$gt: 350} }, {address : "Pune"}]  }   ,{});

// select * from customer where address in ('Pune','Chennai')
db.customer.find({address: { $in : ["Pune","Chennai"]}},{});

// select * from customer where lower(address) in ('pune','chennai')
db.customer.find({address: { $in : [/pune/i,/chennai/i]}},{});

// select * from customer where address != 'Chennai'
db.customer.find({address: { $ne : "Chennai"}},{});

// db.customer.find({},{"name_lower": $_id.name.toLowerCase()}); // good use case of toLowerCase() 

// select * from customer where lower(address) != 'chennai'
//db.customer.find({address: { $ne : /chennai/i}},{}); // Can't have regex as arg to $ne.'
db.customer.find({address: { $not : /chennai/i}},{});

// $exists
//https://www.mongodb.com/docs/manual/reference/operator/query-element/#element-query-operators
//it is true when the document contains the field
// select books that are not placed on any rack
// books that do not have a rack_num field 
db.LMS_BOOK_DETAILS.find({ RACK_NUM: {$exists: false}},{});
db.LMS_BOOK_DETAILS.insertOne({BOOK_TITLE : "RACK_NUM IS BLANK STRING", RACK_NUM : ""});
db.LMS_BOOK_DETAILS.insertOne({BOOK_TITLE : "RACK_NUM IS NULL", RACK_NUM : null});

// we need books that have rack_num value is null
// where rack_num is null
db.LMS_BOOK_DETAILS.find({ RACK_NUM: null },{});

// we need books that have rack_num value is not null
// where rack_num is not null
db.LMS_BOOK_DETAILS.find({ RACK_NUM: {$ne : null} },{});

// give me books that have have price in decimal/ double 
db.LMS_BOOK_DETAILS.updateMany({CATEGORY : 'Python'},{$mul : {PRICE : 1.0} });
db.LMS_BOOK_DETAILS.find({ PRICE: { $type: "double" } });

// https://www.mongodb.com/docs/manual/reference/operator/query-evaluation/#evaluation-query-operators
//$expr { $expr: { <expression> } }
// lets create a new field BASE_PRICE
db.LMS_BOOK_DETAILS.updateMany({}, {$set: {BASE_PRICE: NumberInt(5000) }});
db.LMS_BOOK_DETAILS.updateMany({CATEGORY : "Python"}, {$set: {BASE_PRICE: NumberInt(1000) }});
db.LMS_BOOK_DETAILS.updateMany({CATEGORY : "JAVA"}, {$set: {BASE_PRICE: NumberInt(500) }});
// find all the books that have price greater than their base price
// select * from lms_book_details where price > base_price;

//db.LMS_BOOK_DETAILS.find({PRICE : {$gt: $BASE_PRICE}});
//db.LMS_BOOK_DETAILS.find({$expr: { PRICE : {$gt: BASE_PRICE} }});
db.LMS_BOOK_DETAILS.updateMany({BOOK_TITLE : "RACK_NUM IS NULL"},{$set: {PRICE:null}});
db.LMS_BOOK_DETAILS.find({$expr: { $gt:  [ "PRICE","BASE_PRICE"] }});
db.LMS_BOOK_DETAILS.find({$and : [{$expr: { $gt:  [ "PRICE","BASE_PRICE"] }},{PRICE: {$exists: true}},{PRICE: {$ne : null}}]});

// projections in find()
// I need book_title and category of books 
db.LMS_BOOK_DETAILS.find({},{BOOK_TITLE : 1, CATEGORY: 1 , _id : 0 });
// i need all fields other than _id 
db.LMS_BOOK_DETAILS.find({},{ _id : 0 });
// you cannot mix 0 and 1's 
db.LMS_BOOK_DETAILS.find({},{ BOOK_TITLE : 1, CATEGORY: 0  });

// sort function 
db.LMS_BOOK_DETAILS.find({},{BOOK_TITLE : 1, _id : 0 }).sort({ BOOK_TITLE : 1 });
// pagination implementation
skip_value = 12
limit_value = 4
db.LMS_BOOK_DETAILS.find({},{BOOK_TITLE : 1, _id : 0 }).sort({ BOOK_TITLE : 1 }).skip(skip_value).limit(limit_value);


// array's operations 
db.EMBEDDED_JSON.find({},{});

// FIND all the books that have a supplier from Chennai 
db.EMBEDDED_JSON.find({BOOKS_SUPPLIED_BY : {$elemMatch : {"ADDRESS" : "CHENNAI"}} },{});

// add a new supplier json to "BOOK_CODE" : "BL000002"
db.EMBEDDED_JSON.updateMany({"BOOK_CODE" : "BL000002"},
                            {$addToSet : {BOOKS_SUPPLIED_BY :
                                                        {
                                                            "SUPPLIER_ID" : "S99",
                                                            "SUPPLIER_NAME" : "first_supplier",
                                                            "ADDRESS" : "MUMBAI",
                                                            "CONTACT" : NumberLong(820935),
                                                            "EMAIL" : "first_supplier@gmail.com"
                                                        }                            
                                
                                         }
                             }
                            ) ;

// remove SUPPLIER_ID" : "S99 supplier json from "BOOK_CODE" : "BL000002"
db.EMBEDDED_JSON.updateMany({"BOOK_CODE" : "BL000002"},
                            {$pull : {BOOKS_SUPPLIED_BY :{"SUPPLIER_ID" : "S99"}}}
                            ) ;


// go inside the books_supplied_by array and update email field for the first match only
//-- where address = 'MUMBAI'
db.EMBEDDED_JSON.find({BOOKS_SUPPLIED_BY : {$elemMatch : { ADDRESS : "MUMBAI"}}});
db.EMBEDDED_JSON.updateMany({BOOKS_SUPPLIED_BY : {$elemMatch : { ADDRESS : "MUMBAI"}}},
                            {$set : {"BOOKS_SUPPLIED_BY.$.EMAIL" : "xxxxxxx@gmail.com" }}                            
                            );

                            
// $[]

db.EMBEDDED_JSON.updateMany({"BOOK_CODE" : "BL000002"},
                            {$addToSet : {BOOKS_SUPPLIED_BY :
                                                        {
                                                            "SUPPLIER_ID" : "S100",
                                                            "SUPPLIER_NAME" : "second_supplier_added",
                                                            "ADDRESS" : "MUMBAI",
                                                            "CONTACT" : NumberLong(820935),
                                                            "EMAIL" : "secondsupplier@gmail.com"
                                                        }                            
                                
                                         }
                             }
                            ) ;                            

// go inside the books_supplied_by array and update email field for the all array elements only
//-- where address = 'MUMBAI'
db.EMBEDDED_JSON.find({BOOKS_SUPPLIED_BY : {$elemMatch : { ADDRESS : "MUMBAI"}}});
db.EMBEDDED_JSON.updateMany({BOOKS_SUPPLIED_BY : {$elemMatch : { ADDRESS : "MUMBAI"}}},
                            {$set : {"BOOKS_SUPPLIED_BY.$[].EMAIL" : "yyyyyyyyy@gmail.com" }}                            
                            );


// go inside the books_supplied_by array and update email field for the array elements which are MUMBAI only
//-- where address = 'MUMBAI'
db.EMBEDDED_JSON.find({BOOKS_SUPPLIED_BY : {$elemMatch : { ADDRESS : "MUMBAI"}}});
db.EMBEDDED_JSON.updateMany({BOOKS_SUPPLIED_BY : {$elemMatch : { ADDRESS : "MUMBAI"}}},
                            {$set : {"BOOKS_SUPPLIED_BY.$[element].EMAIL" : "zzzzzz@gmail.com" }},
                            { arrayFilters: [ { "element.ADDRESS": "MUMBAI" } ] }                            
                            );      
							
/*
---------------------------------------
/// Indexes DEMO 
---------------------------------------
*/

db.LMS_BOOK_ISSUE.find({BOOK_ISSUE_NO : {$gt : 5 }},{});

// create unique index test_ind on LMS_BOOK_ISSUE(BOOK_ISSUE_NO)
db.LMS_BOOK_ISSUE.createIndex( { "BOOK_ISSUE_NO" : 1  }, {name : "test_ind"},{ unique: true })
// select * from user_indexes where table_name = 'LMS_BOOK_ISSUE';
db.LMS_BOOK_ISSUE.getIndexes();

db.LMS_BOOK_ISSUE.find({BOOK_ISSUE_NO : {$gt : 5 }},{});

// drop index 
db.LMS_BOOK_ISSUE.dropIndex({ "BOOK_ISSUE_NO" : 1 } );

db.LMS_BOOK_ISSUE.find({BOOK_ISSUE_NO : {$gt : 5 }},{});



							
                            

                                                 