CREATE TABLE departments (
  department_id NUMBER PRIMARY KEY,
  department_name VARCHAR2(50)
);

CREATE TABLE employees (
  employee_id   NUMBER,
  first_name    VARCHAR2(50),
  last_name     VARCHAR2(50),
  department_id NUMBER,
  job_title     VARCHAR2(50),
  salary        NUMBER(10, 2),
  hire_date     DATE,
  PRIMARY KEY (employee_id),
  FOREIGN KEY (department_id) REFERENCES departments (department_id)
);


INSERT INTO departments (department_id, department_name)
VALUES (1, 'HR');

INSERT INTO departments (department_id, department_name)
VALUES (2, 'IT');

INSERT INTO departments (department_id, department_name)
VALUES (3, 'Finance');

INSERT INTO departments (department_id, department_name)
VALUES (4, 'Sales');

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (1, 'John', 'Doe', 1, 'Manager', 75000.00, TO_DATE('2022-03-15', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (2, 'Jane', 'Smith', 2, 'Developer', 60000.00, TO_DATE('2022-05-10', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (3, 'Michael', 'Johnson', 1, 'Analyst', 55000.00, TO_DATE('2022-02-10', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (4, 'Emily', 'Anderson', 3, 'Assistant Manager', 65000.00, TO_DATE('2023-01-05', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (5, 'David', 'Wilson', 4, 'Sales Representative', 60000.00, TO_DATE('2022-11-20', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (6, 'Jessica', 'Thompson', 1, 'Manager', 70000.00, TO_DATE('2022-01-10', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (7, 'Andrew', 'Miller', 3, 'Analyst', 50000.00, TO_DATE('2022-05-25', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (8, 'Sophia', 'Brown', 2, 'Developer', 65000.00, TO_DATE('2022-07-15', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (9, 'Thomas', 'Davis', 4, 'Sales Manager', 90000.00, TO_DATE('2022-04-01', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (10, 'Jennifer', 'Jones', 1, 'Analyst', 55000.00, TO_DATE('2022-12-01', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (11, 'Robert', 'Smith', 3, 'Manager', 75000.00, TO_DATE('2023-02-20', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (12, 'Sarah', 'Adams', 2, 'Developer', 55000.00, TO_DATE('2022-08-10', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (13, 'Daniel', 'Taylor', 3, 'Analyst', 50000.00, TO_DATE('2023-04-05', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (14, 'Olivia', 'Wilson', 4, 'Sales Representative', 55000.00, TO_DATE('2022-10-15', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (15, 'James', 'Johnson', 1, 'Analyst', 60000.00, TO_DATE('2023-01-10', 'YYYY-MM-DD'));


--------------------------------------------------------------
4 questions to practice PL/SQL functions and procedures:
--------------------------------------------------------------

1. Write a PL/SQL function named "CalculateCircleArea" that takes the radius of a circle as a parameter and returns the area of the circle.

2. Write a PL/SQL function named "CheckPrimeNumber" that takes an integer as a parameter and returns true if the number is prime, and false otherwise.

3. Write a PL/SQL function named "GetEmployeeCount" that returns the total number of employees in the "employees" table.

4. Write a PL/SQL procedure named "UpdateSalary" that takes an employee ID and a percentage increase as parameters and updates the salary of the employee accordingly.


---
Triggers:
---
CREATE TABLE departments (
  department_id NUMBER PRIMARY KEY,
  department_name VARCHAR2(50),
  location VARCHAR2(50),
  avg_salary NUMBER(10, 2)
);



INSERT INTO departments (department_id, department_name, location, avg_salary)
VALUES (1, 'HR', 'New York', null);

INSERT INTO departments (department_id, department_name, location, avg_salary)
VALUES (2, 'IT', 'San Francisco', null);

INSERT INTO departments (department_id, department_name, location, avg_salary)
VALUES (3, 'Finance', 'London', null);

INSERT INTO departments (department_id, department_name, location, avg_salary)
VALUES (4, 'Sales', 'Paris', null);



CREATE TABLE employees (
  employee_id NUMBER,
  first_name VARCHAR2(50),
  last_name VARCHAR2(50),
  department_id NUMBER,
  job_title VARCHAR2(50),
  salary NUMBER(10, 2),
  hire_date DATE,
  PRIMARY KEY (employee_id),
  FOREIGN KEY (department_id) REFERENCES departments(department_id)
);




INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (1, 'John', 'Doe', 1, 'Manager', 75000.00, TO_DATE('2022-03-15', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (2, 'Jane', 'Smith', 2, 'Engineer', 60000.00, TO_DATE('2022-05-10', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (3, 'Michael', 'Johnson', 1, 'Analyst', 55000.00, TO_DATE('2022-02-10', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (4, 'Emily', 'Anderson', 3, 'Assistant Manager', 65000.00, TO_DATE('2023-01-05', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (5, 'David', 'Williams', 2, 'Developer', 70000.00, TO_DATE('2022-08-20', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, first_name, last_name, department_id, job_title, salary, hire_date)
VALUES (6, 'Jessica', 'Thompson', 1, 'Manager', 70000.00, TO_DATE('2022-01-10', 'YYYY-MM-DD'));

----------------------------------------------------------------------
2 trigger problems based on the "employees" and "departments" dataset:
----------------------------------------------------------------------
1. Create a trigger that automatically updates the average salary in the "departments" table whenever a new employee is inserted into the "employees" table.
2. Create a trigger that calculates and updates the average salary in the "departments" table whenever an employee's salary is updated.