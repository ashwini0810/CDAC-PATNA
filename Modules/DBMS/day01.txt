
github -- sharing repo
oraclelivesql account -- where we will write code 

-- sample code on the ide ---
create table test ( a number);
insert into test values (1);
insert into test values (1);
insert into test values (1);

select * from test;

---- Discussion---
what is a Database ?

Storage of information in an organised form for easy access( Select , Update,deletes etc)

Types of databases ?

1) Relational -- Oracle / MYSql, DB2 , Azure DB , Sql Server ,Postgres
2) Non-relational/NOSQL -- MongoDB , Cassandra 
3) Graph 
4) network 

https://db-engines.com/en/ranking/object+oriented+dbms

--- Interact with the database 

Languages in which you with the database 
1) SQL -- Structured Query Language

Programming language extension to SQL
-- Java , C# , PLSQL 

--- Codd rules (12) ---
Rule 1: The Information Rule : Table 
	student name , rollno , dob , age , bloodgroup
Rule 2: Guaranteed Access Rule : Data in the table
Rule 3: Systematic Treatment of NULL Values
	NULL -> absense of data  / missing information 
Rule 4: Dynamic Online Catalog Based on the
Relational Model : Metadata in the form of table
Rule 5: Comprehensive Data Sublanguage Rule : SQL

ATM Withdrawal

Transaction is a way of grouping together some statements that 
do one logical task 

1) verify the insert my pin by the user
2) Check his/her balance 
3) deduct his balance amount by the withdrawal amount
4) dispense the cash from the cash 


Views -- are ways in which you limit access to the underlying table 
create table login ( user_name string  , password string)

-- User 
create view user_view_only_user_name as
select user_name from login


-- when user accesses his view 
select * from user_view_only_user_name 

-- Integrity constraints 
1) primary key : ( not null + unique )
2) Unique key : (unique)
3) Not null : (not null)
4) Foreign key / refrential integrity  : 
	getting more information from other source
	checking for values being inserted into the child table column 
	whether they are present in the parent table 
5) Check constraint : expression check on a column 	


Rule 6: View Updating Rule

	-- implementation example 
	-- Views -- are ways in which you limit access to the underlying table 

	-- create table and insert some rows into it 
	create table login ( user_name varchar2(100)  , password varchar2(100));
	insert into login values ( 'Gaurav','Gaurav');    
	insert into login values ( 'Sagar','Sagar');

	-- User view 
	create view user_view_only_user_name as select user_name from login;

	-- when user accesses his view 
	select * from user_view_only_user_name ;

	-- updating the view's one row to a new value  
	update user_view_only_user_name set user_name = 'GAURAV_NEW' where user_name = 'Gaurav';

	-- when user accesses his view 
	select * from user_view_only_user_name ;

	-- base table got updated so the view reflects the change
	select * from login ;


Rule 7: High-Level Insert, Update, and Delete
Rule 8: Physical Data Independence
Rule 9: Logical Data Independence
Rule 10: Integrity Independence
Rule 11: Distribution Independence
Rule 12: Non-Subversion Rule

--------------------------
SQL : Introduction
--------------------------

Structured Query Language -- High level language that helps talk to the database

Categories of commands in SQL
---------------------
a) DDL (Data Definition Language) [changes made would be permanent]
CREATE, DROP, ALTER, RENAME,TRUNCATE

b) DML (Data Manipulation Language)[changes made would be Temporary]
INSERT,UPDATE,DELETE

c) TCL ( Transaction Control Language) [Always works on DML's]
COMMIT ROLLBACK SAVEPOINT

d) DCL ( Data Control Language) [useful across users when you need to give/takeback permissions	]
GRANT REVOKE 

e) DQL ( Data Query Language)
SELECT


----------------------------------------
what is schema and schema objects ?
schema -- logical container where all the schema objects will reside 
   ex: gaurav[username]/gaurav[password]  -- apni khud ki schema
       cdac[username]/pass[password] -- apni khud ki schema
	   
  schema objects -- objects in the schema 
   ex: table , view , procedure, function 
   
-- implementation example
-- create tables 
create table login ( user_name varchar2(100)  , password varchar2(100));
insert into login values ( 'Gaurav','Gaurav');    
insert into login values ( 'Sagar','Sagar');

-- dictionary view / online data catalogue 
select * from user_tables;
select * from user_tab_columns;
select * from user_objects;

create view my_view as select * from login;
select * from login;

-- I am the owner of the table login , so I can give grant of selct to the new_user
grant select,insert,update on login to new_user;

-- if new_user logins into his schema and fires the below select 
select * from gaurav.login;

   
gaurav -- login table    

cdac -- > select grant to table student 
                  -- only select on that table , no other operation permitted 
		  revoke -- will revert the grants provided 
 
/* -------------------------------
SQL Command Categories Demo
-------------------------------
a) DDL (Data Definition Language) [changes made would be permanent]
CREATE, DROP, ALTER, RENAME,TRUNCATE

*/
create table MY_FIRST_TABLE
(
my_number_column number, 
my_float_column number(5,2),
my_date_column date,
my_timestamp_column timestamp,
my_timestampTZ_column timestamp with time zone,
my_varchar2_column varchar2(100)
);

-- structure of the table 
describe my_first_table;
desc my_first_table;

-- display purposes 
alter session set nls_date_format = 'dd-Mon-yyyy hh24:mi:ss';
alter session set nls_timestamp_format = 'dd-mm-yyyy hh24:mi:ss:ff';


/* three ways you can get date for a column*/
select sysdate from dual;
select current_date from dual;
select to_date('01-Jan-2022 13:00:00','dd-mon-yyyy hh24:mi:ss') from dual;

/* three ways you can get timestamp value for a column*/
select systimestamp from dual;
select current_timestamp from dual;
select to_timestamp('01-JAN-2022 13:00:00:999999','dd-mon-yyyy hh24:mi:ss:FF') from dual;


select * from MY_FIRST_TABLE ;
/*
b) DML (Data Manipulation Language)[changes made would be Temporary]
INSERT,UPDATE,DELETE
*/   

-- INSERT INTO MY_FIRST_TABLE(COLUMN_LIST) VALUES (VALUE_LIST);

insert into my_first_table
(my_number_column,my_float_column,my_date_column,my_timestamp_column,my_timestampTZ_column,my_varchar2_column)
values 
(1,2.9,to_date('01-01-2022 13:00:00','dd-mm-yyyy hh24:mi:ss'),to_timestamp('01-JAN-2022 13:00:00:9999','dd-mon-yyyy hh24:mi:ss:FF'),systimestamp,'my_first_row');

INSERT INTO MY_FIRST_TABLE(my_number_column,my_float_column,my_date_column,my_timestamp_column,my_timestampTZ_column)
VALUES (2,2.2,current_date,current_timestamp,current_timestamp);

INSERT INTO MY_FIRST_TABLE(my_number_column,my_float_column,my_date_column,my_timestamp_column,my_timestampTZ_column)
VALUES (2,2.2,current_date,current_timestamp,current_timestamp);

INSERT INTO MY_FIRST_TABLE(my_number_column,my_float_column,my_date_column,my_timestamp_column)
VALUES (3,3.3,current_date,current_timestamp);

-- invalid case for number(5,2) --- 3 digits before point and 2 digits after point 
INSERT INTO MY_FIRST_TABLE(my_number_column,my_float_column,my_date_column,my_timestamp_column,my_timestampTZ_column)
VALUES (12,9999.99,current_date,current_timestamp,current_timestamp);

INSERT INTO MY_FIRST_TABLE(my_number_column,my_float_column,my_date_column,my_timestamp_column,my_timestampTZ_column)
VALUES (12,999.999,current_date,current_timestamp,current_timestamp);

INSERT INTO MY_FIRST_TABLE(my_number_column,my_float_column,my_date_column,my_timestamp_column,my_timestampTZ_column)
VALUES (33,23.267,to_date('27-Sep-2022 14:53:00','dd-mm-yyyy hh24:mi:ss'),to_timestamp('27-Sep-2022 14:53:00.100900','dd-mm-yyyy hh24:mi:ss.ff'),current_timestamp);

/* 
The Oracle NUMBER data type has precision and scale.

The precision is the number of digits in a number. It ranges from 1 to 38.
The scale is the number of digits to the right of the decimal point in a number. It ranges from -84 to 127.
*/


------------------
delete and update
-------------------
drop table MY_FIRST_TABLE;
create table MY_FIRST_TABLE
(
my_number_column number, 
my_float_column number(5,2),
my_date_column date,
my_timestamp_column timestamp,
my_timestampTZ_column timestamp with time zone,
my_varchar2_column varchar2(100)
);

INSERT INTO MY_FIRST_TABLE(my_number_column,my_float_column,my_date_column,my_timestamp_column,my_timestampTZ_column)
VALUES (1,1.2,sysdate,systimestamp,systimestamp);

INSERT INTO MY_FIRST_TABLE(my_number_column,my_float_column,my_date_column,my_timestamp_column,my_timestampTZ_column)
VALUES (1,1.2,sysdate,systimestamp,systimestamp);

INSERT INTO MY_FIRST_TABLE(my_number_column,my_float_column,my_date_column,my_timestamp_column,my_timestampTZ_column)
VALUES (2,1.2,sysdate,systimestamp,systimestamp);

-- unconditional delete 
delete from MY_FIRST_TABLE ; 
-- conditional delete 
delete from MY_FIRST_TABLE where MY_NUMBER_COLUMN = 1  ;

-- unconditional update 
update  MY_FIRST_TABLE  set my_float_column = 5.9 ;
-- conditional update 
update  MY_FIRST_TABLE set my_float_column = 6.9 where MY_NUMBER_COLUMN = 2 ;

-- updating multiple columns at one go 
update  MY_FIRST_TABLE set my_float_column = 7.9 , MY_DATE_COLUMN = sysdate where MY_NUMBER_COLUMN = 2 ;

select * from MY_FIRST_TABLE;

-----------------------------------
--- difference between truncate and delete 
-----------------------------------
drop table MY_FIRST_TABLE;
create table MY_FIRST_TABLE
(
my_number_column number, 
my_float_column number(5,2),
my_date_column date,
my_timestamp_column timestamp,
my_timestampTZ_column timestamp with time zone,
my_varchar2_column varchar2(100)
);

INSERT INTO MY_FIRST_TABLE(my_number_column,my_float_column,my_date_column,my_timestamp_column,my_timestampTZ_column)
VALUES (1,1.2,sysdate,systimestamp,systimestamp);

INSERT INTO MY_FIRST_TABLE(my_number_column,my_float_column,my_date_column,my_timestamp_column,my_timestampTZ_column)
VALUES (2,2.2,sysdate,systimestamp,systimestamp);

select * from MY_FIRST_TABLE;

select * from MY_FIRST_TABLE   ;
delete from MY_FIRST_TABLE ;
rollback;
select * from MY_FIRST_TABLE   ;

select * from MY_FIRST_TABLE   ;
truncate table MY_FIRST_TABLE ;
rollback;
select * from MY_FIRST_TABLE   ;

--------------------------
rollback and savepoint and commit
------------------------
drop table dummy;
create table dummy
(
 dummy_col number
);
insert into dummy(dummy_col) values ( 1);
insert into dummy(dummy_col) values ( 2);
insert into dummy(dummy_col) values ( 3);
insert into dummy(dummy_col) values ( 4);

select * from dummy;


-- case 1  commit
select * from dummy;
exec savepoint s1 ;
 delete from dummy where dummy_col = 1 ;
exec savepoint s2 ;
 delete from dummy where dummy_col = 2 ;
commit; 
select * from dummy;


-- case 2  rollback
select * from dummy;
exec savepoint s1 ;
 delete from dummy where dummy_col = 1 ;
exec savepoint s2 ;
 delete from dummy where dummy_col = 2 ;
rollback; 
select * from dummy;

-- case 2  rollback to savepoint
select * from dummy;
exec savepoint s1 ;
 delete from dummy where dummy_col = 1 ;
exec savepoint s2 ;
 delete from dummy where dummy_col = 2 ;
rollback to s2; 
select * from dummy;

select * from dummy;
exec savepoint s1 ;
 delete from dummy where dummy_col = 1 ;
exec savepoint s2 ;
 delete from dummy where dummy_col = 2 ;
rollback to s1; 
select * from dummy;

----------------
grant and revoke

https://www.oracletutorial.com/oracle-administration/oracle-grant/

-----------------
 Alter demonstration
--------------------
drop table MY_FIRST_TABLE;
create table MY_FIRST_TABLE
(
my_number_column number, 
my_float_column number(5,2),
my_date_column date,
my_timestamp_column timestamp,
my_timestampTZ_column timestamp with time zone,
my_varchar2_column varchar2(100)
);

-- alter the datatype of the column
alter table my_first_table modify my_number_column number(20);
desc my_first_table;
-- alter the name of the column to a new name
alter table my_first_table rename column my_number_column to my_number_column_new_name;
-- alter the table to drop the column 
alter table my_first_table drop( my_number_column_new_name  );
-- alter the table to add the column 
alter table my_first_table add( my_number_column number  );

-- rename the entire table 
rename my_first_table to my_first_table_new;
desc my_first_table_new;
drop table my_first_table_new;