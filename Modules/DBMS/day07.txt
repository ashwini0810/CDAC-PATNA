PLSQL -- > Programming language extension to SQL in Oracle(Propretiery language to Oracle)

SQL - declarative language

-- anonymous block 
declare 
 -- declaration section 
begin
 -- executable section 

exception
 -- exception section  
end

-- stored function     
create function <function_name>(parameter_list) return <datatype>  as 
    -- declaration section 
begin
 -- executable section 

return <value of that datatype>
exception
 -- exception section  
end

-- invoke a function
begin
  function_name(parameter_list_values);
end;

-- select upper('Gaurav') from dual ;
-- stored procedure
create procedure <procedure_name>(parameter_list) as
 -- declaration section 
begin
 -- executable section 
exception
 -- exception section  
end

-- invoke a procedure
begin
  procedure_name(parameter_list_values)
end;


-------------
--- examples
-------------


BEGIN
   DBMS_OUTPUT.put_line ('Hello World!');
END;

-- anonymous block
BEGIN
   DBMS_OUTPUT.put_line ('Hello World!');
END;

-- stored procedure 
create procedure my_first_proc as 
BEGIN
   DBMS_OUTPUT.put_line ('Hello World!');
END;

begin 
    my_first_proc; 
end;


-- stored procedure that accepts parameter
drop procedure my_second_proc ;
create procedure my_second_proc(whom_to_wish varchar2 , day_no number)  as 
BEGIN
   dbms_output.put_line ('Hello ' || whom_to_wish ||' Welcome to Day' || day_no || ' of DBMS course');
END;

begin
    my_second_proc('Students',7); 
end;

-- stored function 
drop function my_first_func ;
create function my_first_func return number as 
BEGIN
   DBMS_OUTPUT.put_line ('Hello World!');
   return 1;
END;

declare
    my_var number; -- declaring the variable 
begin
    my_var := my_first_func; 
    DBMS_OUTPUT.put_line ( my_var);
end;

-- 
-- stored function that accepts parameter
drop function my_second_func ;
create function my_second_func(whom_to_wish varchar2 , day_no number) return number as 
BEGIN
   DBMS_OUTPUT.put_line ('Hello ' || whom_to_wish ||' Welcome to Day' || day_no || ' of DBMS course');
   return 1;
END;


declare
    my_var number; -- declaring the variable 
begin
    my_var := my_second_func('Students',7); 
    DBMS_OUTPUT.put_line ( my_var);
end;


-- stored function that accepts parameter and returns a processed string
drop function my_third_func ;
create function my_third_func(whom_to_wish varchar2 , day_no number) return varchar2 as 
BEGIN
   return 'Hello ' || whom_to_wish ||' Welcome to Day' || day_no || ' of DBMS course' ;
END;


declare
    my_var varchar2(100); -- declaring the variable 
begin
    my_var := my_third_func('Students',7); 
    DBMS_OUTPUT.put_line ( my_var);
end;

select my_third_func('Students',7) from dual;
-- procedure cannot be called from query
--select my_second_proc('Students',7) from dual; 

-- procedure cannot be called from query whereas a function can be called from a query
-- procedure does not return a value whereas function does 

/* another example on anonymous block , function ,procedure*/
/* create a  unnamed block that declares two variables  x , y and prints their sum */
/* create a  function f_add(x number,y number) that takes two values  x , y  and returns their sum */
/* create a procedure p_add(x number,y number) that takes two values  x , y  and prints their sum */
   
-- create 
declare
 x number := 10;
 y number := 20;
begin
 dbms_output.put_line(x+y);
end;

-- create 
create function f_add( x number,y number) return number as
begin
 return x+y;
end;

-- create 
create procedure p_add( x number,y number)  as
begin
 dbms_output.put_line( x+y);
end;


-- invoke 
declare
    ret_val number;
begin
  ret_val := f_add(10,20);
  dbms_output.put_line('The returned value from the function f_add is ' ||  ret_val);
  p_add(10,20);
end;   

---------------------------------------------------------
Exercise
----------------------------------------------------------
/* create a  unnamed block that declares two variables  x , y and prints their substraction */
/* create a  function f_sub(x number,y number) that takes two values  x , y  and returns their substraction */
/* create a procedure p_sub(x number,y number) that takes two values  x , y  and prints their substraction */
--------------------------------------------------------------------



declare
var1 number := 10 ;
var2 number := 1 ;
result number;
begin
   result := var1-var2;
  dbms_output.put_line('The result is ' || result);
end;

create function  f_sub(var1 number,var2 number) return number as 
	result number;
begin
   result := var1-var2;
  return result;
end;

declare 
    ret_val number;
begin
    ret_val := f_sub(10,1);
    dbms_output.put_line('The result is ' || ret_val);
end;

drop  procedure p_sub;
create procedure p_sub(var1 number,var2 number) as 
result number;
begin
   result := var1-var2;
  dbms_output.put_line('The result is ' || result);
end;

begin
   p_sub(11,1); 
end;

select * from user_objects where object_name = 'P_SUB';


-------------------------------------------------------------------
/* create a  unnamed block that declares two variables  x := "Hello" , y := "your_name" and prints their concatenated string of x and y*/
/* create a  function f_print(x varchar2,y varchar2) that takes two values  x , y  and returns their concatenated string of x and y */
/* create a procedure p_print(x varchar2,y varchar2) that takes two values  x , y  and prints their concatenated string of x and y */
--------------------------------------------------------------------

declare
    x varchar2(100) := 'Hello';
	y varchar2(100) := 'World';
begin
    dbms_output.put_line(x||' ' ||y);
end;

create function my_print(x varchar2 , y varchar2) return varchar2 as
begin
    return x||' ' ||y;
end;
/
    
begin
    dbms_output.put_line(my_print('Hello' ,'World'));
end;


create procedure my_p_print(x varchar2,y varchar2) as
begin
    dbms_output.put_line(x||' ' ||y);
end;
/
begin
    my_p_print('Hello' ,'World');
end;


-------------------------------------------
--- parameter mode demo (IN/OUT/IN OUT)
--------------------------------------------
create or replace function get_address(read_param IN OUT varchar2 , write_param IN OUT varchar2 , read_write_param IN OUT varchar2) return varchar2 as
begin
    
    dbms_output.put_line(' Before change read_param:' || read_param);
    dbms_output.put_line('Before change  write_param:' || write_param);
    dbms_output.put_line('Before change  read_write_param:' || read_write_param);

    read_param := 'Columbo';
	write_param := 'Columbo- State';
    read_write_param := 'Srilanka';

	dbms_output.put_line(' After change read_param:' || read_param);
    dbms_output.put_line('After change  write_param:' || write_param);
    dbms_output.put_line('After change  read_write_param:' || read_write_param);

    return read_param || ' ' || write_param || ' ' || read_write_param;
end;
/

declare
    city varchar2(100):= 'Pune';
    state varchar2(100):= 'MH';
    country varchar2(100):= 'India';
begin
    dbms_output.put_line('The return value ' ||  get_address(city,state,country));
end;
/    

-----------------------------------------------------
-- cursor for loop 
-- -- a block that prints the supplier name is <> and he lives in <>
-------------------------------------------------------
select supplier_name, address , supplier_name || ' is from ' || address new_value from lms_suppliers_details;
/* implicit cursor for loop */
begin
  for rcvd_row in (select supplier_name, address from lms_suppliers_details sd )
  loop
    dbms_output.put_line( rcvd_row.supplier_name || ' is from ' || rcvd_row.address);
  end loop;
end;

/* explcit cursor for loop */
declare
    cursor my_cursor is select supplier_name, address from lms_suppliers_details;
begin
  for rcvd_row in my_cursor
  loop
    dbms_output.put_line( rcvd_row.supplier_name || ' is from ' || rcvd_row.address);
  end loop;
end;

-- example 2
-- a block that prints the name of the members who belong to pune/mumbai/chennai(CI) who have issued a book 

begin
    for rcv_row in (
                    select distinct member_name
                    from lms_members lm inner join lms_book_issue iss on (lm.member_id = iss.member_id)
    	            where lower(city) in ('pune','mumbai','chennai')
        		   )
    loop
        dbms_output.put_line('The member_name is ' || rcv_row.member_name);
    end loop;
end;


--------------------------------------------------------------------------------
---- Triggers ( named blocks that are invoked automatically on a given action to the table ( insert/update/delete)
--------------------------------------------------------------------------------
/*
CREATE [OR REPLACE] TRIGGER trigger_name
{before|after} {INSERT | UPDATE | DELETE}
ON table_name
FOR EACH ROW

BEGIN
    EXCEPTION
    ...
END;
*/

/* Problem statement : We are trying to audit my_login table so that we capture any insert/update/delete that happen to the table */

create table my_login ( username varchar2(100) , password varchar2(100));
create table my_audit ( old_username varchar2(100) , old_password varchar2(100) ,username varchar2(100) , password varchar2(100), who_did_it varchar2(100) , when_was_it_done date);

/* insert  block */
create or replace procedure audit_insert(in_username varchar2,in_password varchar2, in_who_did_it varchar2 , in_when_was_it_done varchar2) as
begin
    insert into my_audit (username ,password, who_did_it , when_was_it_done ) values (in_username ,in_password,in_who_did_it , in_when_was_it_done);
end;

/* update  block */
create or replace procedure audit_update(in_old_username varchar2,in_old_password varchar2, in_username varchar2,in_password varchar2, in_who_did_it varchar2 , in_when_was_it_done varchar2) as
begin
    insert into my_audit (old_username ,old_password,username,password, who_did_it , when_was_it_done ) 
    values (in_old_username ,in_old_password,in_username ,in_password,in_who_did_it , in_when_was_it_done);
end;

/* delete  block */
create or replace procedure audit_delete(in_old_username varchar2,in_old_password varchar2, in_who_did_it varchar2 , in_when_was_it_done varchar2) as
begin
    insert into my_audit (old_username ,old_password,username,password, who_did_it , when_was_it_done ) 
    values (in_old_username ,in_old_password,null ,null,in_who_did_it , in_when_was_it_done);
end;


-----
--Automatically calling these procedure based on the DML
-----
CREATE OR REPLACE TRIGGER my_audit_trigger
after INSERT OR UPDATE OR DELETE
ON my_login
FOR EACH ROW
BEGIN

    IF INSERTING THEN
    		audit_insert(:new.username ,:new.password , 'Gaurav' , sysdate );
    END IF;

    IF 	UPDATING THEN
       		audit_update(:old.username ,:old.password , :new.username ,:new.password , 'Gaurav'  , sysdate );
    END IF; 

    IF DELETING THEN 
    		audit_delete(:old.username ,:old.password  , 'Gaurav'  , sysdate  );
    END IF; 

    
END;
/
alter session set nls_date_format = 'dd-mon-yyyy hh24:mi:ss'    ;

select * from my_login;
select * from my_audit;

insert into my_login (username , password ) values ('Gaurav' ,'password');
update my_login set username = 'Gaurav Rajput' , password = 'New password' ;
delete from my_login where username = 'Gaurav Rajput';

    
